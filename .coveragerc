[run]
omit =
    *migrations*
    *tests*
    config/*
    test/*
    manage.py
    authors/apps/articles/utils.py
    authors/wsgi.py
    authors/apps/profiles/permissions.py
    authors/apps/profiles/apps.py
    authors/apps/articles/apps.py
    authors/apps/follows/apps.py
    authors/apps/ratings/apps.py
    

[report]
exclude_lines =
    pragma: no cover
    def __repr__
    serializer = self.parent.parent.__class__(value, context=self.context)
    return serializer.data
    return "{}".format(self.title)
    return self.user.username
    return Response(status=status.HTTP_200_OK, data=response)
    response = {"email": id_info['email'],"username": user.username,"token": token}
    if user and user.is_active:
    token = handle_token(user)
    response = {"email": user.email,"username": user.username,"token": token}
    return Response(status=status.HTTP_200_OK, data=response)
    url = 'https://api.twitter.com/1.1/account/verify_credentials.json'
    response = twitter.get(f'{url}?include_email=true')
    token = {'oauth_token': serializer.initial_data.get('access_token'),'oauth_token_secret': serializer.initial_data.get('access_token_secret')}
    id_info = json.loads(response.text)
    user = backend.do_auth(token)
    twitter = OAuth1Session(client_key=os.environ.get('SOCIAL_AUTH_TWITTER_KEY'),client_secret=os.environ.get('SOCIAL_AUTH_TWITTER_SECRET'),resource_owner_key=serializer.initial_data.get('access_token'),resource_owner_secret=serializer.initial_data.get('access_token_secret'))
    return [permission() for permission in self.permission_classes]
